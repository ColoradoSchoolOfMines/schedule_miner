#
# Sphinx configuration file
#

#############################################################################
## data source definition
#############################################################################

source catalog
{
   # data source type. mandatory, no default value
   # known types are mysql, pgsql, mssql, xmlpipe, xmlpipe2, odbc
   type              = mysql

   #####################################################################
   ## SQL settings (for 'mysql' and 'pgsql' types)
   #####################################################################

   # some straightforward parameters for SQL source types
   sql_host          = SQL_HOST
   sql_user          = SQL_USER
   sql_pass          = SQL_PASS
   sql_db            = SQL_DB
   sql_port          = 3306   # optional, default is 3306

   # main document fetch query
   # mandatory, integer document ID field MUST be the first selected column
   sql_query = \
      SELECT id, id, course_id, instructor_id, department_id, crn, section, name, description, course_number, credit_hours, instructor_name, department_abbreviation, department_name \
      FROM catalog;

   # unsigned integer attribute declaration
   # multi-value (an arbitrary number of attributes is allowed), optional
   # optional bit size can be specified, default is 32
   sql_attr_uint = id
   sql_attr_uint = course_id
   sql_attr_uint = department_id
   sql_attr_uint = instructor_id

   # boolean attribute declaration
   # multi-value (an arbitrary number of attributes is allowed), optional
   # equivalent to sql_attr_uint with 1-bit size
   #
   # sql_attr_bool         =

   # bigint attribute declaration
   # multi-value (an arbitrary number of attributes is allowed), optional
   # declares a signed (unlike uint!) 64-bit attribute
   #
   # sql_attr_bigint       =

   # UNIX timestamp attribute declaration
   # multi-value (an arbitrary number of attributes is allowed), optional
   # similar to integer, but can also be used in date functions
   #
   # sql_attr_timestamp =

   # string ordinal attribute declaration
   # multi-value (an arbitrary number of attributes is allowed), optional
   # sorts strings (bytewise), and stores their indexes in the sorted list
   # sorting by this attr is equivalent to sorting by the original strings
   #
   # sql_attr_str2ordinal  =

   # floating point attribute declaration
   # multi-value (an arbitrary number of attributes is allowed), optional
   # values are stored in single precision, 32-bit IEEE 754 format
   #
   # sql_attr_float = 

   # multi-valued attribute (MVA) attribute declaration
   # multi-value (an arbitrary number of attributes is allowed), optional
   # MVA values are variable length lists of unsigned 32-bit integers
   #
   # syntax is ATTR-TYPE ATTR-NAME 'from' SOURCE-TYPE [;QUERY] [;RANGE-QUERY]
   # ATTR-TYPE is 'uint' or 'timestamp'
   # SOURCE-TYPE is 'field', 'query', or 'ranged-query'
   # QUERY is SQL query used to fetch all ( docid, attrvalue ) pairs
   # RANGE-QUERY is SQL query used to fetch min and max ID values, similar to 'sql_query_range'
   #
   # sql_attr_multi  = uint tag from query; SELECT id, tag FROM tags
   # sql_attr_multi  = uint tag from ranged-query; \
   #  SELECT id, tag FROM tags WHERE id>=$start AND id<=$end; \
   #  SELECT MIN(id), MAX(id) FROM tags

   # document info query, ONLY for CLI search (ie. testing and debugging)
   # optional, default is empty
   # must contain $id macro and must fetch the document by that id
   sql_query_info    = SELECT * FROM course_sections WHERE id=$id
}

#############################################################################
## index definition
#############################################################################

# local index example
#
# this is an index which is stored locally in the filesystem
#
# all indexing-time options (such as morphology and charsets)
# are configured per local index
index catalog_index
{
   # document source(s) to index
   # multi-value, mandatory
   # document IDs must be globally unique across all sources
   source         = catalog

   # index files path and file name, without extension
   # mandatory, path must be writable, extensions will be auto-appended
   path        = /var/lib/data/catalog_index

   # document attribute values (docinfo) storage mode
   # optional, default is 'extern'
   # known values are 'none', 'extern' and 'inline'
   docinfo        = extern

   # memory locking for cached data (.spa and .spi), to prevent swapping
   # optional, default is 0 (do not mlock)
   # requires searchd to be run from root
   mlock       = 0

   # a list of morphology preprocessors to apply
   # optional, default is empty
   #
   # builtin preprocessors are 'none', 'stem_en', 'stem_ru', 'stem_enru',
   # 'soundex', and 'metaphone'; additional preprocessors available from
   # libstemmer are 'libstemmer_XXX', where XXX is algorithm code
   # (see libstemmer_c/libstemmer/modules.txt)
   morphology     = libstemmer_english, stem_en, soundex
}

#############################################################################
## indexer settings
#############################################################################

indexer
{
   # memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
   # optional, default is 32M, max is 2047M, recommended is 256M to 1024M
   mem_limit         = 512M
}

#############################################################################
## searchd settings
#############################################################################

searchd
{
   # hostname, port, or hostname:port, or /unix/socket/path to listen on
   # multi-value, multiple listen points are allowed
   # optional, default is 0.0.0.0:9312 (listen on all interfaces, port 9312)
   #
   # listen          = 127.0.0.1
   # listen          = 192.168.0.1:9312
   # listen          = 9312
   # listen          = /var/run/searchd.sock

   # log file, searchd run info is logged here
   # optional, default is 'searchd.log'
   log               = /var/log/sphinx/searchd.log

   # query log file, all search queries are logged here
   # optional, default is empty (do not log queries)
   query_log         = /var/log/sphinx/query.log

   # client read timeout, seconds
   # optional, default is 5
   read_timeout      = 5

   # request timeout, seconds
   # optional, default is 5 minutes
   client_timeout    = 300

   # maximum amount of children to fork (concurrent searches to run)
   # optional, default is 0 (unlimited)
   max_children      = 30

   # PID file, searchd process ID file name
   # mandatory
   pid_file       = /var/run/sphinx/searchd.pid

   # max amount of matches the daemon ever keeps in RAM, per-index
   # WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
   # default is 1000 (just like Google)
   max_matches       = 1000

   # seamless rotate, prevents rotate stalls if precaching huge datasets
   # optional, default is 1
   seamless_rotate      = 1

   # whether to forcibly preopen all indexes on startup
   # optional, default is 0 (do not preopen)
   preopen_indexes      = 0

   # whether to unlink .old index copies on succesful rotation.
   # optional, default is 1 (do unlink)
   unlink_old        = 1
}

# --eof--
